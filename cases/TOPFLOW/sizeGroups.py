# This file is used to calculate the representative diameters and corresponding
# volume fraction (f) values for discretization of the bubble size range. Volume
# fractions are calculated by interpolation using the measurements of Prasser et
# al. (2007).

import math
import sys
from scipy.interpolate import interp1d
import numpy as np

nClasses=int(float(sys.argv[1]))
setup=int(float(sys.argv[2]))

if setup == 1:

    inlet=[[0,
        1.146788991, 1.972477064, 2.52293578, 2.844036697, 3.394495413, 3.899082569, 4.357798165, 4.633027523, 4.816513761, 4.95412844, 5.183486239, 5.321100917, 5.412844037, 5.550458716, 5.642201835, 5.733944954, 5.825688073, 5.931447503, 5.995158002, 6.090723751, 6.154434251, 6.25, 6.345565749, 6.409276249, 6.536697248, 6.727828746, 7.014525994, 7.205657492, 7.333078491, 7.364933741, 7.396788991, 7.46049949, 7.619775739, 7.715341488, 7.810907238, 7.842762487, 7.874617737, 7.906472987, 8.097604485, 8.161314985, 8.288735984, 8.320591233, 8.448012232, 8.607288481, 8.830275229, 9.021406728, 9.116972477, 9.276248726, 9.626656473, 9.94520897, 10.42303772, 10.90086646, 11.31498471, 11.79281346, 12.5891947, 13.48114169, 14.46865443, 15.32874618, 16.15698267, 16.73037717, 17.49490316, 18.5461264, 19.08766565, 19.62920489, 30], [0.018320611, 0.013740458, 0.013740458, 0.013740458, 0.018320611, 0.018320611, 0.022900763, 0.045801527, 0.077862595, 0.119083969, 0.18778626, 0.261068702, 0.34351145, 0.416793893, 0.485496183, 0.549618321, 0.609160305, 0.677862595, 0.722391858, 0.76692112, 0.820992366, 0.890966921, 0.941857506, 1.011832061, 1.062722646, 1.11043257, 1.132697201, 1.11043257, 1.075445293, 1.040458015, 1.002290076, 0.951399491, 0.894147583, 0.82735369, 0.773282443, 0.728753181, 0.671501272, 0.617430025, 0.556997455, 0.512468193, 0.452035623, 0.4043257, 0.372519084, 0.340712468, 0.308905852, 0.280279898, 0.245292621, 0.216666667, 0.168956743, 0.124427481, 0.086259542, 0.054452926, 0.038549618, 0.02264631, 0.009923664, 0.009923664, 0.009923664, 0.003562341, 0.003562341, 0.003562341, 0.003562341, 0.003562341, 0.006743003, 0.003562341, 0.003562341, 0]]


    diameter = np.logspace(0.30103, 1.11394, num=nClasses)

elif setup ==2:

    inlet=[[0.136239782,1.907356948,2.179836512,2.72479564,2.997275204,3.269754768,4.359673025,5.449591281,6.811989101,7.629427793,9.809264305,11.85286104,13.21525886,15.1226158,17.30245232,18.11989101,19.61852861,20.98092643,21.66212534,22.34332425,23.29700272,23.84196185,24.79564033,25.47683924,26.15803815,26.70299728,27.11171662,27.38419619,27.79291553,28.33787466,28.88283379,29.70027248,30.10899183,30.65395095,31.19891008,31.88010899,33.24250681,34.46866485,35.42234332,35.83106267,36.64850136,37.32970027,37.8746594,38.55585831,39.64577657,40.05449591,40.73569482,41.28065395,41.55313351,41.96185286,42.37057221,42.77929155,43.1880109,43.73297003,44.27792916,44.55040872,44.95912807,45.23160763,45.91280654,46.86648501,48.09264305,49.31880109,50.81743869,54.08719346,58.58310627,69.89100817,92.64305177,98.5013624],[0.005263158,0.009210526,0.035526316,0.060526316,0.076315789,0.098684211,0.107894737,0.103947368,0.096052632,0.084210526,0.071052632,0.072368421,0.076315789,0.085526316,0.094736842,0.109210526,0.114473684,0.117105263,0.130263158,0.152631579,0.172368421,0.193421053,0.214473684,0.234210526,0.244736842,0.259210526,0.277631579,0.298684211,0.322368421,0.342105263,0.365789474,0.381578947,0.397368421,0.414473684,0.428947368,0.446052632,0.453947368,0.457894737,0.455263158,0.444736842,0.425,0.410526316,0.401315789,0.380263158,0.360526316,0.346052632,0.331578947,0.315789474,0.298684211,0.282894737,0.265789474,0.248684211,0.230263158,0.215789474,0.201315789,0.182894737,0.155263158,0.127631579,0.097368421,0.073684211,0.051315789,0.038157895,0.026315789,0.011842105,0.009210526,0.005263158,0.002631579,0]]

    diameter = np.logspace(-0.30103, 1.69897, num=nClasses)

interp_inlet = interp1d(inlet[0],   inlet[1])
sizeGroupsString=""

intb = []
F = []

intb.append(0)
for i in range(nClasses-1):
    intb.append((diameter[i]+diameter[i+1])/2)
intb.append(2*intb[-1]-intb[-2])
for i in range(nClasses):
    F.append(interp_inlet(diameter[i])*(intb[i+1]-intb[i])/np.trapz(inlet[1], inlet[0]))

Fcorr = 1/sum(F)
F=[element*Fcorr for element in F]

for i in range(nClasses):
    sizeGroupsString+="f"+str(i)+"{dSph "+str(diameter[i])+"e-3; value "+str(F[i])+";}\n"

sizeGroupsFile = open("constant/sizeGroups", "w")
write = sizeGroupsFile.write(sizeGroupsString)
sizeGroupsFile.close()